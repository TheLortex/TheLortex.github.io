{"version":3,"file":"component---src-pages-mdx-frontmatter-variant-mdx-frontmatter-slug-tsx-content-file-path-src-data-articles-2018-04-27-compiling-and-linking-for-esp-32-mdx-6111d50600f6e1f30605.js","mappings":"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","sources":["webpack://lucas-pluvinage/./src/data/articles/2018-04-27-compiling-and-linking-for-esp32.mdx","webpack://lucas-pluvinage/./src/pages/{mdx.frontmatter__variant}/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I've got native OCaml code running! It seems to pass all the runtime tests, and as I fixed some GC segfaults I'm now pretty confident in the backend code.\\nIt's not optimized at all, but you can now experiment with OCaml on ESP32 MCUs.\"), \"\\n\", React.createElement(_components.h2, null, \"OCaml cross-compiler installation\"), \"\\n\", React.createElement(_components.p, null, \"Switch opam to OCaml version 4.06 or a 4.07 as only these two versions are supported, using the \", React.createElement(_components.code, null, \"opam switch\"), \" command.\"), \"\\n\", React.createElement(_components.p, null, \"Add my cross-compilation repository in opam, with:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"opam repo add cross-esp32 https://github.com/TheLortex/opam-cross-esp32.git\\n\")), \"\\n\", React.createElement(_components.p, null, \"After that, you'll be able to install the cross-compiler, with:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"opam install ocaml-esp32\\n\")), \"\\n\", React.createElement(_components.p, null, \"You now have an OCaml cross-compiler for esp32 installed in \", React.createElement(_components.code, null, \"~/.opam/<switch>/esp32-sysroot/\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Cross-compiling OCaml libraries\"), \"\\n\", React.createElement(_components.p, null, \"Your favorite build system can already cross-compile code. You can either use\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"jbuilder build -x esp32 ...\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ocamlfind -toolchain esp32 ...\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"env OCAMLFIND_TOOLCHAIN=esp32 ocamlbuild ...\"), \"\\nto build libraries.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The libraries used by these build systems are located in \", React.createElement(_components.code, null, \"~/.opam/<switch>/esp32-sysroot/lib/\"), \". A good thing to know is that jbuilder automatically makes the difference between host code and target code, hence enabling the use of ppx tools.\"), \"\\n\", React.createElement(_components.h2, null, \"Building an ESP32 application\"), \"\\n\", React.createElement(_components.p, null, \"To build an esp32 application, you'll need to link native code with the ESP-Iot Development Framework which contains libraries, bootloader code and linker scripts.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/TheLortex/hello_caml\"\n  }, \"Hello caml\"), \" is an example of project structure using jbuilder that builds a flashable binary for esp32.\"), \"\\n\", React.createElement(_components.p, null, \"Basically, it's not complicated:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Build and ship OCaml code into a single object:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"using the \", React.createElement(_components.code, null, \"-output-complete-obj\"), \" option on the native compiler \", React.createElement(_components.code, null, \"ocamlopt\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"using \", React.createElement(_components.code, null, \"jbuilder build -x esp32 _build/default.esp32/main.exe.o\"), \" that will automatically use the option.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"This object file's entry point is \", React.createElement(_components.code, null, \"caml_main\"), \". So the next thing to do is create a \", React.createElement(_components.code, null, \"startup-c.c\"), \" file that defines a function \", React.createElement(_components.code, null, \"app_main\"), \" which calls \", React.createElement(_components.code, null, \"caml_main\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Then everything needs to be linked together, and the ESP32 framework takes the lead to create the final binary.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/lucas/projects/TheLortex.github.io/src/data/articles/2018-04-27-compiling-and-linking-for-esp32.mdx\";\nimport {jsx} from \"theme-ui\";\nimport {Layout} from \"../../components/Layout\";\nimport {tagsColor} from \"../projects\";\nimport {SiteHead} from \"../../components/Head\";\nconst Projects = props => {\n  var _props$data$mdx, _props$data$mdx$front, _tags$length, _tagsColor$tags$, _props$data$mdx2, _props$data$mdx2$fron, _props$data$mdx3, _props$data$mdx3$fron;\n  const tags = (_props$data$mdx = props.data.mdx) === null || _props$data$mdx === void 0 ? void 0 : (_props$data$mdx$front = _props$data$mdx.frontmatter) === null || _props$data$mdx$front === void 0 ? void 0 : _props$data$mdx$front.tags;\n  const backgroundColor = ((_tags$length = tags === null || tags === void 0 ? void 0 : tags.length) !== null && _tags$length !== void 0 ? _tags$length : 0 > 0) ? (_tagsColor$tags$ = tagsColor[tags[0]]) !== null && _tagsColor$tags$ !== void 0 ? _tagsColor$tags$ : tagsColor.default : tagsColor.default;\n  return jsx(Layout, {\n    page: (_props$data$mdx2 = props.data.mdx) === null || _props$data$mdx2 === void 0 ? void 0 : (_props$data$mdx2$fron = _props$data$mdx2.frontmatter) === null || _props$data$mdx2$fron === void 0 ? void 0 : _props$data$mdx2$fron.variant,\n    article: (_props$data$mdx3 = props.data.mdx) === null || _props$data$mdx3 === void 0 ? void 0 : (_props$data$mdx3$fron = _props$data$mdx3.frontmatter) === null || _props$data$mdx3$fron === void 0 ? void 0 : _props$data$mdx3$fron.title\n  }, jsx(\"div\", {\n    sx: {\n      padding: [1, 3]\n    }\n  }, jsx(\"div\", {\n    sx: {\n      borderLeft: \"solid \" + backgroundColor + \" 8px\",\n      paddingX: [2, 4]\n    }\n  }, props.children)));\n};\nconst query = \"1596219016\";\nProjects\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Projects, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = props => {\n  var _props$data$mdx$front2, _props$data$mdx4, _props$data$mdx4$fron;\n  return jsx(SiteHead, {\n    title: (_props$data$mdx$front2 = (_props$data$mdx4 = props.data.mdx) === null || _props$data$mdx4 === void 0 ? void 0 : (_props$data$mdx4$fron = _props$data$mdx4.frontmatter) === null || _props$data$mdx4$fron === void 0 ? void 0 : _props$data$mdx4$fron.title) !== null && _props$data$mdx$front2 !== void 0 ? _props$data$mdx$front2 : undefined\n  });\n};\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","code","pre","ul","li","a","_provideComponents","components","React","href","wrapper","MDXLayout","Projects","_props$data$mdx","_props$data$mdx$front","_tags$length","_tagsColor$tags$","_props$data$mdx2","_props$data$mdx2$fron","_props$data$mdx3","_props$data$mdx3$fron","tags","data","mdx","frontmatter","backgroundColor","length","tagsColor","jsx","Layout","page","variant","article","title","sx","padding","borderLeft","paddingX","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_props$data$mdx$front2","_props$data$mdx4","_props$data$mdx4$fron","SiteHead","undefined"],"sourceRoot":""}