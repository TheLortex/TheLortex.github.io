{"version":3,"file":"component---src-pages-articles-tsx-5fa3ddaedbfbc6821500.js","mappings":"uOAyIA,UA/HmBA,IAEfC,EAAAA,EAAAA,IAACC,EAAAA,EAAM,CAACC,KAAK,YACV,KACDF,EAAAA,EAAAA,IAAA,OAAKG,GAAI,CAAEC,QAAS,OAAQC,cAAe,MAAOC,SAAU,SACzDP,EAAMQ,KAAKC,QAAQC,MAAMC,SAASD,IACjCT,EAAAA,EAAAA,IAAA,OAAKG,GAAI,CAAEC,QAAS,OAAQC,cAAe,YACzCL,EAAAA,EAAAA,IAAA,UAAKS,EAAME,YACVF,EAAMG,MACJC,QAAQC,IAAI,IAAAC,EAAAC,EAAA,OAAkB,QAAlBD,EAAKD,EAAKG,gBAAQ,IAAAF,GAAa,QAAbC,EAAbD,EAAeG,mBAAW,IAAAF,OAAb,EAAbA,EAA4BG,KAAK,IAClDC,KAAI,CAACN,EAAMO,KAAM,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAChB,MAAMC,EAAkB,QAAhBL,EAAGR,EAAKG,gBAAQ,IAAAK,OAAA,EAAbA,EAAeJ,YAC1B,OACElB,EAAAA,EAAAA,IAAA,OACE4B,IAAKD,EAAGR,MACRhB,GAAI,CACF0B,OAAQ,EACRC,SAAU,IAAOT,EAAI,EAAK,GAAMA,EAAI,EAAK,GACzCU,aAAc,GACdC,gBACwC,QADzBT,EACbU,EAAAA,WAAkB,QAART,EAACG,EAAGO,YAAI,IAAAV,EAAAA,EAAI,CAAC,YAAY,WAAG,IAAAD,EAAAA,EACtCU,EAAAA,UAAAA,WAGJjC,EAAAA,EAAAA,IAAA,OACEG,GAAI,CACFC,QAAS,OACTC,cAAe,MACf8B,IAAK,IAGNR,EAAGS,aACFpC,EAAAA,EAAAA,IAAA,OACEG,GAAI,CACFkC,UAAW,SACXN,aAAc,EACdO,SAAU,SACVR,SAAU,SAGZ9B,EAAAA,EAAAA,IAACuC,EAAAA,EAAW,CACVC,OAAOC,EAAAA,EAAAA,GAASd,EAAGS,YACnBM,IAAKf,EAAGgB,mBAId3C,EAAAA,EAAAA,IAAA,YACEA,EAAAA,EAAAA,IAAA,OACEG,GAAI,CACFC,QAAS,OACTC,cAAe,MACfuC,WAAY,SACZT,IAAK,KAGPnC,EAAAA,EAAAA,IAAA,KACEG,GAAI,CACF6B,gBAAiB,QACjBa,qBAAsB,OACtBC,wBAAyB,OACzBC,QAAS,EACTC,SAAU,IAGXrB,EAAGsB,MAELtB,EAAGuB,SAAWvB,EAAGwB,MAChBnD,EAAAA,EAAAA,IAAA,MAAIG,GAAI,CAAEiD,UAAW,SAAWzB,EAAGR,QAEnCnB,EAAAA,EAAAA,IAACqD,EAAAA,KAAI,CAACC,GAAI3B,EAAGwB,OACXnD,EAAAA,EAAAA,IAAA,MAAIG,GAAI,CAAEiD,UAAW,SAAWzB,EAAGR,UAIzCnB,EAAAA,EAAAA,IAAA,OAAKG,GAAI,CAAE4C,QAAS,EAAGQ,WAAY,KACjCvD,EAAAA,EAAAA,IAAA,SAAI2B,EAAG6B,aACN7B,EAAGuB,SACFlD,EAAAA,EAAAA,IAACyD,EAAAA,EAAa,KACQ,QADRhC,EACE,QADFC,EACXZ,EAAKG,gBAAQ,IAAAS,OAAA,EAAbA,EAAegC,YAAI,IAAAjC,EAAAA,EAAI,OAM9B,SA6CjB,MAAMkC,EAAeA,KAAM3D,EAAAA,EAAAA,IAAA,aAAO,W","sources":["webpack://lucas-pluvinage/./src/pages/articles.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nimport * as React from \"react\";\nimport { graphql, Link, type HeadFC, type PageProps } from \"gatsby\";\nimport { Layout } from \"../components/Layout\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport ReactMarkdown from \"react-markdown\";\nimport { tagsColor } from \"./projects\";\n\nconst IndexPage = (props: PageProps<Queries.ArticlesQuery>) => {\n  return (\n    <Layout page=\"articles\">\n      {\" \"}\n      <div sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        {props.data.allFile.group.flatMap((group) => (\n          <div sx={{ display: \"flex\", flexDirection: \"column\" }}>\n            <h1>{group.fieldValue}</h1>\n            {group.nodes\n              .filter((node) => node.childMdx?.frontmatter?.title)\n              .map((node, i) => {\n                const fm = node.childMdx?.frontmatter!;\n                return (\n                  <div\n                    key={fm.title}\n                    sx={{\n                      margin: 2,\n                      maxWidth: 450 + (i % 3) * 20 - (i % 2) * 10,\n                      borderRadius: 10,\n                      backgroundColor:\n                        tagsColor[(fm.tags ?? [\"default\"])[0]] ??\n                        tagsColor.default,\n                    }}\n                  >\n                    <div\n                      sx={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        gap: 3,\n                      }}\n                    >\n                      {fm.hero_image && (\n                        <div\n                          sx={{\n                            alignSelf: \"center\",\n                            borderRadius: 8,\n                            overflow: \"hidden\",\n                            maxWidth: \"50%\",\n                          }}\n                        >\n                          <GatsbyImage\n                            image={getImage(fm.hero_image)}\n                            alt={fm.hero_image_alt}\n                          />\n                        </div>\n                      )}\n                      <div>\n                        <div\n                          sx={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            alignItems: \"center\",\n                            gap: 3,\n                          }}\n                        >\n                          <p\n                            sx={{\n                              backgroundColor: \"white\",\n                              borderTopRightRadius: \"16px\",\n                              borderBottomRightRadius: \"16px\",\n                              padding: 1,\n                              paddingX: 2,\n                            }}\n                          >\n                            {fm.date}\n                          </p>\n                          {fm.inline || !fm.slug ? (\n                            <h2 sx={{ textAlign: \"left\" }}>{fm.title}</h2>\n                          ) : (\n                            <Link to={fm.slug}>\n                              <h2 sx={{ textAlign: \"left\" }}>{fm.title}</h2>\n                            </Link>\n                          )}\n                        </div>\n                        <div sx={{ padding: 3, paddingTop: 0 }}>\n                          <p>{fm.description}</p>\n                          {fm.inline && (\n                            <ReactMarkdown>\n                              {node.childMdx?.body ?? \"\"}\n                            </ReactMarkdown>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query Articles {\n    allFile(\n      filter: { sourceInstanceName: { eq: \"articles\" } }\n      sort: { childMdx: { frontmatter: { date: DESC } } }\n    ) {\n      group(field: { childMdx: { frontmatter: { category: SELECT } } }) {\n        fieldValue\n\n        nodes {\n          childMdx {\n            frontmatter {\n              title\n              description\n              date(formatString: \"DD/MM/YYYY\")\n              tags\n              inline\n              slug\n              hero_image_alt\n              hero_image {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Articles</title>;\n"],"names":["props","jsx","Layout","page","sx","display","flexDirection","flexWrap","data","allFile","group","flatMap","fieldValue","nodes","filter","node","_node$childMdx","_node$childMdx$frontm","childMdx","frontmatter","title","map","i","_node$childMdx2","_tagsColor$","_fm$tags","_node$childMdx$body","_node$childMdx3","fm","key","margin","maxWidth","borderRadius","backgroundColor","tagsColor","tags","gap","hero_image","alignSelf","overflow","GatsbyImage","image","getImage","alt","hero_image_alt","alignItems","borderTopRightRadius","borderBottomRightRadius","padding","paddingX","date","inline","slug","textAlign","Link","to","paddingTop","description","ReactMarkdown","body","Head"],"sourceRoot":""}