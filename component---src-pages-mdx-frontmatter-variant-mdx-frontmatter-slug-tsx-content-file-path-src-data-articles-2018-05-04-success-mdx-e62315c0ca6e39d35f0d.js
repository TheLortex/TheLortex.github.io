"use strict";(self.webpackChunklucas_pluvinage=self.webpackChunklucas_pluvinage||[]).push([[862],{9684:function(e,t,n){n.r(t),n.d(t,{Head:function(){return h},default:function(){return m}});var l=n(7294),a=n(1151),o=n.p+"static/esp32-3c5c1bf741b5c42e99e6439eb25d5635.webm";function r(e){const t=Object.assign({h2:"h2",p:"p",ul:"ul",li:"li",h3:"h3",code:"code",a:"a"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h2,null,"First, the video!"),"\n",l.createElement("video",{controls:!0,loop:"loop",width:"100%"},l.createElement("source",{src:o,type:"video/webm"})),"\n",l.createElement(t.h2,null,"What has been achieved"),"\n",l.createElement(t.p,null,"After a long way of hacking and debugging my native code emitter in the OCaml compiler, I've finally come to build and run the first example in Mirage unikernels!\nI'm able to build a whole Mirage project and run it on an ESP32 with 4Mb of extended RAM. It's more of a proof of concept, this probably doesn't work out of the box as I hacked a lot of things on the way. I tried to explain what I did in the bottom of this article but maybe I forgot some steps."),"\n",l.createElement(t.p,null,"The whole example size is:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Flash code: 917942 bytes"),"\n",l.createElement(t.li,null,"Flash rodata: 473868 bytes"),"\n",l.createElement(t.li,null,"Static data-RAM: 66324 bytes (36.7% used)"),"\n",l.createElement(t.li,null,"Static instruction-RAM: 43661 bytes (33.3% used)"),"\n"),"\n",l.createElement(t.p,null,"I'll be working on getting runtime informations in order to see how hard it would be to run Mirage unikernels on ESP32 without additional RAM. Right now it goes out of memory in the startup code, as it tries to allocate 128kb of frame table (whereas 178kb of dynamic memory is available in total)."),"\n",l.createElement(t.h3,null,"opam-cross-esp32"),"\n",l.createElement(t.p,null,"Every mirage package needed to build a hello world example has been ported in this ",l.createElement(t.code,null,"opam-cross-esp32")," OPAM repository. It's ",l.createElement(t.a,{href:"https://github.com/TheLortex/opam-cross-esp32"},"available")," on Github.\nThere are some other packages for ESP32 development:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"esp32-toolchain-gcc: xtensa-esp32-elf- prefixed binutils set up in path, located in (xtensa-esp32-elf) subdirectory in the switch."),"\n",l.createElement(t.li,null,"ocaml-esp32: the cross-compiler, needed to build almost every other package. It's installed in a subdirectory (esp32-sysroot) in the switch."),"\n",l.createElement(t.li,null,"esp32-idf-headers: updates the compiler include path to contain the ESP32 IDF headers."),"\n",l.createElement(t.li,null,"mirage-esp32: mirage runtime implementation for esp32."),"\n",l.createElement(t.li,null,"ctypes-esp32: ctypes implementation for esp32, using libffi. But it's useless as dynamic linking is not supported.. I will use cstubs generation in the future."),"\n"),"\n",l.createElement(t.h3,null,"ocaml-esp32"),"\n",l.createElement(t.p,null,"The compiler has now a full native backend to esp32 targets. It's indeed subject to a lot of optimizations as it's a first running draft.\n",l.createElement(t.a,{href:"https://github.com/TheLortex/ocaml-esp32"},"Available here")),"\n",l.createElement(t.h3,null,"mirage-esp32"),"\n",l.createElement(t.p,null,"Stubs and OS interface for esp32 platform.\n",l.createElement(t.a,{href:"https://github.com/TheLortex/mirage-esp32"},"Available here")),"\n",l.createElement(t.h3,null,"mirage"),"\n",l.createElement(t.p,null,"Adds an esp32 target in mirage configuration tool. It's not working as intended though.\n",l.createElement(t.a,{href:"https://github.com/TheLortex/mirage"},"Available here")),"\n",l.createElement(t.h3,null,"hello_mirage"),"\n",l.createElement(t.p,null,"The first mirage sample to fully run on ESP32.\n",l.createElement(t.a,{href:"https://github.com/TheLortex/hello_mirage"},"Available here")),"\n",l.createElement(t.h2,null,"There remains hacks to do, and it's not intended to work out-of-the-box right now."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Update ",l.createElement(t.code,null,"bigarray")," META to remove ",l.createElement(t.code,null,"unix")," dependency."),"\n",l.createElement(t.li,null,"Update ",l.createElement(t.code,null,"mirage-profile")," META to remove ",l.createElement(t.code,null,"ppx_tools_versioned")," dependency."),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"num-esp32")," needs to be built twice"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"mirage config -t esp32")," needs to be worked on, and should generate the correct jbuild file."),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"esp32-idf-headers")," doesn't install every headers in the root as intended. A ",l.createElement(t.code,null,"mv include/* .")," and ",l.createElement(t.code,null,"mv includes/* .")," in ",l.createElement(t.code,null,"<switch>/xtensa-esp32-elf/xtensa-esp32-elf/include")," is needed to finish the installation."),"\n"))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},s=n(8733),c=n(1858),u=n(7166);const d=e=>{var t,n,l,a,o,r,i,d;const m=null===(t=e.data.mdx)||void 0===t||null===(n=t.frontmatter)||void 0===n?void 0:n.tags,h=null!==(l=null==m?void 0:m.length)&&void 0!==l&&l&&null!==(a=u.tagsColor[m[0]])&&void 0!==a?a:u.tagsColor.default;return(0,s.tZ)(c.A,{page:null===(o=e.data.mdx)||void 0===o||null===(r=o.frontmatter)||void 0===r?void 0:r.variant,article:null===(i=e.data.mdx)||void 0===i||null===(d=i.frontmatter)||void 0===d?void 0:d.title},(0,s.tZ)("div",{sx:{backgroundColor:h,padding:[1,3],paddingX:[2,4],borderRadius:40}},e.children))};function m(e){return l.createElement(d,e,l.createElement(i,e))}const h=()=>(0,s.tZ)("title",null,"Projects")}}]);
//# sourceMappingURL=component---src-pages-mdx-frontmatter-variant-mdx-frontmatter-slug-tsx-content-file-path-src-data-articles-2018-05-04-success-mdx-e62315c0ca6e39d35f0d.js.map